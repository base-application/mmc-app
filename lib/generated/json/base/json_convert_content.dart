// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:mmc/bean/achievement_entity.dart';
import 'package:mmc/bean/advertisement_entity.dart';
import 'package:mmc/bean/app_version_entity.dart';
import 'package:mmc/bean/check_log_entity.dart';
import 'package:mmc/bean/event_data_item_info_entity.dart';
import 'package:mmc/bean/event_detail_info_entity.dart';
import 'package:mmc/bean/grade_level_info_entity.dart';
import 'package:mmc/bean/group_item_entity.dart';
import 'package:mmc/bean/group_item_info_entity.dart';
import 'package:mmc/bean/guide_line_entity.dart';
import 'package:mmc/bean/home_index_info_entity.dart';
import 'package:mmc/bean/image_vo_entity.dart';
import 'package:mmc/bean/login_info_entity.dart';
import 'package:mmc/bean/master_class_entity.dart';
import 'package:mmc/bean/master_class_videos_entity.dart';
import 'package:mmc/bean/message_no_read_entity.dart';
import 'package:mmc/bean/network_item_info_entity.dart';
import 'package:mmc/bean/newest_item_info_entity.dart';
import 'package:mmc/bean/notification_entity.dart';
import 'package:mmc/bean/personal_profile_info_entity.dart';
import 'package:mmc/bean/referral_entity.dart';
import 'package:mmc/bean/state_item_info_entity.dart';
import 'package:mmc/bean/thank_note_entity.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }
  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
		final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  } 
	//Go back to a single instance by type
	static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
		final String type = M.toString();
		if(type == (AchievementEntity).toString()){
			return AchievementEntity.fromJson(json) as M;
		}
		if(type == (AdvertisementEntity).toString()){
			return AdvertisementEntity.fromJson(json) as M;
		}
		if(type == (AppVersionEntity).toString()){
			return AppVersionEntity.fromJson(json) as M;
		}
		if(type == (CheckLogEntity).toString()){
			return CheckLogEntity.fromJson(json) as M;
		}
		if(type == (EventDataItemInfoEntity).toString()){
			return EventDataItemInfoEntity.fromJson(json) as M;
		}
		if(type == (EventDataItemInfoEventPoster).toString()){
			return EventDataItemInfoEventPoster.fromJson(json) as M;
		}
		if(type == (EventDataItemInfoGroups).toString()){
			return EventDataItemInfoGroups.fromJson(json) as M;
		}
		if(type == (EventDataItemInfoAttendance).toString()){
			return EventDataItemInfoAttendance.fromJson(json) as M;
		}
		if(type == (EventDetailInfoEntity).toString()){
			return EventDetailInfoEntity.fromJson(json) as M;
		}
		if(type == (EventDetailInfoEventPoster).toString()){
			return EventDetailInfoEventPoster.fromJson(json) as M;
		}
		if(type == (EventDetailInfoGroups).toString()){
			return EventDetailInfoGroups.fromJson(json) as M;
		}
		if(type == (GradeLevelInfoEntity).toString()){
			return GradeLevelInfoEntity.fromJson(json) as M;
		}
		if(type == (GroupItemEntity).toString()){
			return GroupItemEntity.fromJson(json) as M;
		}
		if(type == (GroupItemInfoEntity).toString()){
			return GroupItemInfoEntity.fromJson(json) as M;
		}
		if(type == (GroupItemInfoUserInfoVos).toString()){
			return GroupItemInfoUserInfoVos.fromJson(json) as M;
		}
		if(type == (GroupItemInfoUserInfoVosCompanyVos).toString()){
			return GroupItemInfoUserInfoVosCompanyVos.fromJson(json) as M;
		}
		if(type == (GroupItemInfoUserInfoVosCompanyVosProducePictures).toString()){
			return GroupItemInfoUserInfoVosCompanyVosProducePictures.fromJson(json) as M;
		}
		if(type == (GuideLineEntity).toString()){
			return GuideLineEntity.fromJson(json) as M;
		}
		if(type == (HomeIndexInfoEntity).toString()){
			return HomeIndexInfoEntity.fromJson(json) as M;
		}
		if(type == (HomeIndexInfoSlider).toString()){
			return HomeIndexInfoSlider.fromJson(json) as M;
		}
		if(type == (HomeIndexInfoSliderGroup).toString()){
			return HomeIndexInfoSliderGroup.fromJson(json) as M;
		}
		if(type == (HomeIndexInfoSliderGrades).toString()){
			return HomeIndexInfoSliderGrades.fromJson(json) as M;
		}
		if(type == (ImageVoEntity).toString()){
			return ImageVoEntity.fromJson(json) as M;
		}
		if(type == (LoginInfoEntity).toString()){
			return LoginInfoEntity.fromJson(json) as M;
		}
		if(type == (MasterClassEntity).toString()){
			return MasterClassEntity.fromJson(json) as M;
		}
		if(type == (MasterClassVideosEntity).toString()){
			return MasterClassVideosEntity.fromJson(json) as M;
		}
		if(type == (MessageNoReadEntity).toString()){
			return MessageNoReadEntity.fromJson(json) as M;
		}
		if(type == (NetworkItemInfoEntity).toString()){
			return NetworkItemInfoEntity.fromJson(json) as M;
		}
		if(type == (NewestItemInfoEntity).toString()){
			return NewestItemInfoEntity.fromJson(json) as M;
		}
		if(type == (NewestItemInfoPoster).toString()){
			return NewestItemInfoPoster.fromJson(json) as M;
		}
		if(type == (NotificationEntity).toString()){
			return NotificationEntity.fromJson(json) as M;
		}
		if(type == (PersonalProfileInfoEntity).toString()){
			return PersonalProfileInfoEntity.fromJson(json) as M;
		}
		if(type == (PersonalProfileInfoCompanyVos).toString()){
			return PersonalProfileInfoCompanyVos.fromJson(json) as M;
		}
		if(type == (PersonalProfileInfoCompanyVosProducePictures).toString()){
			return PersonalProfileInfoCompanyVosProducePictures.fromJson(json) as M;
		}
		if(type == (ReferralEntity).toString()){
			return ReferralEntity.fromJson(json) as M;
		}
		if(type == (StateItemInfoEntity).toString()){
			return StateItemInfoEntity.fromJson(json) as M;
		}
		if(type == (ThankNoteEntity).toString()){
			return ThankNoteEntity.fromJson(json) as M;
		}

		print("$type not found");
	
		return null;
}

  //list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<AchievementEntity>[] is M){
			return data.map<AchievementEntity>((Map<String, dynamic> e) => AchievementEntity.fromJson(e)).toList() as M;
		}
		if(<AdvertisementEntity>[] is M){
			return data.map<AdvertisementEntity>((Map<String, dynamic> e) => AdvertisementEntity.fromJson(e)).toList() as M;
		}
		if(<AppVersionEntity>[] is M){
			return data.map<AppVersionEntity>((Map<String, dynamic> e) => AppVersionEntity.fromJson(e)).toList() as M;
		}
		if(<CheckLogEntity>[] is M){
			return data.map<CheckLogEntity>((Map<String, dynamic> e) => CheckLogEntity.fromJson(e)).toList() as M;
		}
		if(<EventDataItemInfoEntity>[] is M){
			return data.map<EventDataItemInfoEntity>((Map<String, dynamic> e) => EventDataItemInfoEntity.fromJson(e)).toList() as M;
		}
		if(<EventDataItemInfoEventPoster>[] is M){
			return data.map<EventDataItemInfoEventPoster>((Map<String, dynamic> e) => EventDataItemInfoEventPoster.fromJson(e)).toList() as M;
		}
		if(<EventDataItemInfoGroups>[] is M){
			return data.map<EventDataItemInfoGroups>((Map<String, dynamic> e) => EventDataItemInfoGroups.fromJson(e)).toList() as M;
		}
		if(<EventDataItemInfoAttendance>[] is M){
			return data.map<EventDataItemInfoAttendance>((Map<String, dynamic> e) => EventDataItemInfoAttendance.fromJson(e)).toList() as M;
		}
		if(<EventDetailInfoEntity>[] is M){
			return data.map<EventDetailInfoEntity>((Map<String, dynamic> e) => EventDetailInfoEntity.fromJson(e)).toList() as M;
		}
		if(<EventDetailInfoEventPoster>[] is M){
			return data.map<EventDetailInfoEventPoster>((Map<String, dynamic> e) => EventDetailInfoEventPoster.fromJson(e)).toList() as M;
		}
		if(<EventDetailInfoGroups>[] is M){
			return data.map<EventDetailInfoGroups>((Map<String, dynamic> e) => EventDetailInfoGroups.fromJson(e)).toList() as M;
		}
		if(<GradeLevelInfoEntity>[] is M){
			return data.map<GradeLevelInfoEntity>((Map<String, dynamic> e) => GradeLevelInfoEntity.fromJson(e)).toList() as M;
		}
		if(<GroupItemEntity>[] is M){
			return data.map<GroupItemEntity>((Map<String, dynamic> e) => GroupItemEntity.fromJson(e)).toList() as M;
		}
		if(<GroupItemInfoEntity>[] is M){
			return data.map<GroupItemInfoEntity>((Map<String, dynamic> e) => GroupItemInfoEntity.fromJson(e)).toList() as M;
		}
		if(<GroupItemInfoUserInfoVos>[] is M){
			return data.map<GroupItemInfoUserInfoVos>((Map<String, dynamic> e) => GroupItemInfoUserInfoVos.fromJson(e)).toList() as M;
		}
		if(<GroupItemInfoUserInfoVosCompanyVos>[] is M){
			return data.map<GroupItemInfoUserInfoVosCompanyVos>((Map<String, dynamic> e) => GroupItemInfoUserInfoVosCompanyVos.fromJson(e)).toList() as M;
		}
		if(<GroupItemInfoUserInfoVosCompanyVosProducePictures>[] is M){
			return data.map<GroupItemInfoUserInfoVosCompanyVosProducePictures>((Map<String, dynamic> e) => GroupItemInfoUserInfoVosCompanyVosProducePictures.fromJson(e)).toList() as M;
		}
		if(<GuideLineEntity>[] is M){
			return data.map<GuideLineEntity>((Map<String, dynamic> e) => GuideLineEntity.fromJson(e)).toList() as M;
		}
		if(<HomeIndexInfoEntity>[] is M){
			return data.map<HomeIndexInfoEntity>((Map<String, dynamic> e) => HomeIndexInfoEntity.fromJson(e)).toList() as M;
		}
		if(<HomeIndexInfoSlider>[] is M){
			return data.map<HomeIndexInfoSlider>((Map<String, dynamic> e) => HomeIndexInfoSlider.fromJson(e)).toList() as M;
		}
		if(<HomeIndexInfoSliderGroup>[] is M){
			return data.map<HomeIndexInfoSliderGroup>((Map<String, dynamic> e) => HomeIndexInfoSliderGroup.fromJson(e)).toList() as M;
		}
		if(<HomeIndexInfoSliderGrades>[] is M){
			return data.map<HomeIndexInfoSliderGrades>((Map<String, dynamic> e) => HomeIndexInfoSliderGrades.fromJson(e)).toList() as M;
		}
		if(<ImageVoEntity>[] is M){
			return data.map<ImageVoEntity>((Map<String, dynamic> e) => ImageVoEntity.fromJson(e)).toList() as M;
		}
		if(<LoginInfoEntity>[] is M){
			return data.map<LoginInfoEntity>((Map<String, dynamic> e) => LoginInfoEntity.fromJson(e)).toList() as M;
		}
		if(<MasterClassEntity>[] is M){
			return data.map<MasterClassEntity>((Map<String, dynamic> e) => MasterClassEntity.fromJson(e)).toList() as M;
		}
		if(<MasterClassVideosEntity>[] is M){
			return data.map<MasterClassVideosEntity>((Map<String, dynamic> e) => MasterClassVideosEntity.fromJson(e)).toList() as M;
		}
		if(<MessageNoReadEntity>[] is M){
			return data.map<MessageNoReadEntity>((Map<String, dynamic> e) => MessageNoReadEntity.fromJson(e)).toList() as M;
		}
		if(<NetworkItemInfoEntity>[] is M){
			return data.map<NetworkItemInfoEntity>((Map<String, dynamic> e) => NetworkItemInfoEntity.fromJson(e)).toList() as M;
		}
		if(<NewestItemInfoEntity>[] is M){
			return data.map<NewestItemInfoEntity>((Map<String, dynamic> e) => NewestItemInfoEntity.fromJson(e)).toList() as M;
		}
		if(<NewestItemInfoPoster>[] is M){
			return data.map<NewestItemInfoPoster>((Map<String, dynamic> e) => NewestItemInfoPoster.fromJson(e)).toList() as M;
		}
		if(<NotificationEntity>[] is M){
			return data.map<NotificationEntity>((Map<String, dynamic> e) => NotificationEntity.fromJson(e)).toList() as M;
		}
		if(<PersonalProfileInfoEntity>[] is M){
			return data.map<PersonalProfileInfoEntity>((Map<String, dynamic> e) => PersonalProfileInfoEntity.fromJson(e)).toList() as M;
		}
		if(<PersonalProfileInfoCompanyVos>[] is M){
			return data.map<PersonalProfileInfoCompanyVos>((Map<String, dynamic> e) => PersonalProfileInfoCompanyVos.fromJson(e)).toList() as M;
		}
		if(<PersonalProfileInfoCompanyVosProducePictures>[] is M){
			return data.map<PersonalProfileInfoCompanyVosProducePictures>((Map<String, dynamic> e) => PersonalProfileInfoCompanyVosProducePictures.fromJson(e)).toList() as M;
		}
		if(<ReferralEntity>[] is M){
			return data.map<ReferralEntity>((Map<String, dynamic> e) => ReferralEntity.fromJson(e)).toList() as M;
		}
		if(<StateItemInfoEntity>[] is M){
			return data.map<StateItemInfoEntity>((Map<String, dynamic> e) => StateItemInfoEntity.fromJson(e)).toList() as M;
		}
		if(<ThankNoteEntity>[] is M){
			return data.map<ThankNoteEntity>((Map<String, dynamic> e) => ThankNoteEntity.fromJson(e)).toList() as M;
		}

		print("${M.toString()} not found");
	
		return null;
}

  static M? fromJsonAsT<M>(dynamic json) {
		if(json == null){
			return null;
		}		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return _fromJsonSingle<M>(json as Map<String, dynamic>);
		}
	}
}